/******************************************************************************
 *  _Example commands for running this file_
 *  Compilation:  javac -Xlint Merge.java
 *  Execution:    java Merge
 *
 *  Example code reverses the input array. Edit this file
 *  to check whether the input is a palindrome.
 //Montasir Omi 23394088
 ******************************************************************************/

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Merge {

  // Sample input
  public static int[] input1 = {1,3,5,6,7,8};
  public static int[] input2 = {2,4,5,6,7};

  public static void main(String[] args){

    // Display Input1
    System.out.println("Input1\t" + Arrays.toString(input1));

    // Create empty queues
    Queue<Integer> queue1 = new LinkedList<Integer>();
    Queue<Integer> queue2 = new LinkedList<Integer>();


    for(int i=0; i<input1.length; i++){
      // One by one push all characters of string to queue.
      queue1.add(input1[i]);
    }
    for(int j=0; j<input2.length; j++){
      // One by one push all characters of string to queue.
      queue2.add(input2[j]);
    }

    // Save the input string
    String output = "";
    while(queue2.peek() != null && queue1.peek() != null ){
        if(queue1.peek()<= queue2.peek())
      //One by one pop all characters from stack and put them back to string.
      output += Integer.toString(queue1.poll());
       
        else{
        if(queue1.peek()> queue2.peek())
            output += Integer.toString(queue2.poll());
        }
    }
    // Filling in the remaining integers that didnt have something to compare to
    while(queue2.peek() != null){
         output += Integer.toString(queue2.poll());
     }  
    while(queue1.peek() != null){
         output += Integer.toString(queue1.poll());
     }
       
    
    
    // Display reversed as string array
    System.out.println("Output1\t" + Arrays.toString(output.split("")));

  }
}
